package main

import "fmt"

//К каким негативным последствиям может привести данный фрагмент кода, и как это исправить? Приведите корректный пример реализации.

//var justString string func someFunc() { Функция someFunc создает срез строки, содержащий только первые 100 байт, и присваивает его глобальной переменной justString.
//	v := createHugeString(1 << 10)  Функция createHugeString создает строку огромного размера (1 << 10, то есть 1024 байта).
//	justString = v[:100] }
//func main() { someFunc()
//}

//Проблема:
//оригинальная большая строка, созданная createHugeString, остается в памяти, так как на нее ссылается срез justString.

//Последствия:
//Повторяющееся вызов someFunc будет создавать все больше и больше больших строк, которые будут оставаться в памяти, пока программа не завершится.
//Это может привести к переполнению кучи и краху программы.

func createHugeString(size int) string {
	// Создание большой строки
	return fmt.Sprintf("%0*d", size, 0)
}

var justString string

func someFunc() {

	v := createHugeString(1 << 10)
	// Создание копии первых 100 байт
	justString = v[:100]

	//После создания среза justString добавляется строка v = "".
	// Происходит освобождение памяти, занимаемой оригинальной строкой
	v = ""
	//Теперь сборщик мусора может освободить память, занимаемую оригинальной строкой, предотвращая утечку.
}

func main() {
	someFunc()
	fmt.Println(justString) // Вывод первых 100 байт
}
